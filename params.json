{"name":"ccv","body":"## Application Driven Philosophy (from 2010)\r\n\r\nIn the set off statement of ccv, I listed one property of it to be \"modern\", which means rather than provides a truck-load of obsolete algorithms, ccv intended to provide best-of-its-kind algorithm among wide range of applications. Last September, I even went further and claimed that the first 4 applications for ccv would be: 1). object matching; 2). object detection; 3). text detection; 4). 3d reconstruction. These statements set the tone for ccv development known now as application-driven.\r\n\r\nThere are a lot of evidence in ccv code base to provide the actual usage of this method. ccv_sample_down was implemented when I was implementing BBF object detection, which requires the image pyramid. However, ccv_sample_up was not implemented until SIFT implementation needs to up-sampling the image in order to get better result. Until today, a very common feature for image processing, know as rescale is not fully implemented yet. ccv_resample function still lacks of scale-up option, because in all these applications I've implemented, there is no need for that.\r\n\r\n## Mission (The set-out statement from 2010)\r\n\r\n### Call for a new, lightweight, c-based computer vision library\r\n\r\nSince 2005, most of my computer vision work were done with OpenCV. It is an amazingly hand-optimized piece of software. A large number of modern applications are based on OpenCV framework. It is a useful toolset. However, for all this years, I finally feel the need to make a more lightweight, pure-c/function based library. There are some ideas:\r\n\r\n1. It should be fast. There is no need to build a toolset that is slow. Former work such as lapack and gsl are a better choices rather than reinvent the wheel. For the same reason, It is necessary to fork basic routines from OpenCV, such as Canny detector, kalman filter, etc.\r\n\r\n2. Better memory management, cache everything. OpenCV partially implemented a memory management routine, but failed to have a cache mechanism, partly because there are too many functions and it hard to break in and add another layer.\r\n\r\n3. Less but more about modern algorithms. Implementing a fewer but niche algorithms and give intuitive examples. Keep compatibility with OpenCV (through interpreting functions).\r\n\r\n4. Give some love to distributed system, and modern compilers (LLVM & Clang).\r\n\r\nI am aware of that many vision works are never made the way to mass (VLFeat for example), but that's the plan.","tagline":"A C-based/Cached/Core Computer Vision Library","google":"UA-303081-6","note":"Don't delete this file! It's used internally to help with page regeneration."}